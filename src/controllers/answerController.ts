import { Context, Telegraf } from 'telegraf';
import supabase from '../services/supabase';
import { getAnswerMessage } from '../lib/answerMessages';

export default class AnswerController {
  public async init(bot: Telegraf): Promise<void> {
    bot.hears(/^(–¥–∞|–î–ê|–î–∞|–¥–ê)$/i, async (context: Context) => {
      await this.execute(context, '–¥–∞');
    });

    bot.hears(
      /^(–Ω–µ—Ç|–ù–ï–¢|–ù–µ—Ç|–Ω–ï—Ç|–ù–ï—Ç|–Ω–ï–¢|–ù–µ–¢|–Ω–µ–¢)$/i,
      async (context: Context) => {
        await this.execute(context, '–Ω–µ—Ç');
      },
    );
  }

  public async execute(context: Context, message: string) {
    if (context.chat && context.from) {
      const { data: answer } = await supabase
        .from('answers')
        .select()
        .eq('chat_id', context.chat.id)
        .eq('user_id', context.from.id)
        .eq('message', message)
        .single();

      if (answer) {
        const count = answer.count + 1;

        await supabase.from('answers').update({ count }).eq('id', answer.id);

        try {
          await context.reply(
            `@${context.from.username}  ${getAnswerMessage(message)}! –°—á–µ—Ç ${count}:0 üéâ`,
            {
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore
              reply_to_message_id: context.message.message_id,
            },
          );
        } catch (error) {
          console.error(
            '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:',
            error,
          );
        }
      } else {
        await supabase.from('answers').insert({
          chat_id: context.chat.id,
          user_id: context.from.id,
          message,
          count: 1,
        });

        try {
          await context.reply(
            `@${context.from.username}  ${getAnswerMessage(message)}! –°—á–µ—Ç 1:0 üéâ`,
            {
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore
              reply_to_message_id: context.message.message_id,
            },
          );
        } catch (error) {
          console.error(
            '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:',
            error,
          );
        }
      }
    }
  }
}
